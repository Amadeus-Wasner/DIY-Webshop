Funktion: Der resources/-Ordner enthält unterstützende Ressourcen für das Projekt. Dazu gehören Datenbank-Initialisierungsskripte, Beispiel-Daten, Dokumentation und andere Hilfsdateien. Diese Dateien werden nicht direkt vom Webserver bereitgestellt, sondern dienen zur Konfiguration, zum Setup und zur Dokumentation.

Komplette Struktur:
graphql
Code kopieren
resources/
├── sql/
│   ├── diy_shop.sql            # SQL-Skript zur Erstellung und Initialisierung der Datenbank
│   ├── demo_data.sql           # Beispiel-Daten für Testzwecke
│   └── migrations/             # Migrationsskripte für Änderungen in der Datenbankstruktur
│       ├── 001_create_users_table.sql
│       ├── 002_create_products_table.sql
│       └── 003_create_orders_table.sql
│
├── docs/
│   ├── ERD_Diagram.png         # Entity-Relationship-Diagramm für die Datenbankstruktur
│   ├── API_Documentation.md    # Dokumentation der API (falls eine API entwickelt wird)
│   └── Feature_Specs.md        # Detaillierte Beschreibung der Funktionen und Anforderungen
│
└── seeds/
    ├── seed_products.php       # PHP-Skript zum Einfügen von Testdaten für Produkte
    ├── seed_users.php          # PHP-Skript zum Einfügen von Testbenutzern
    └── seed_orders.php         # PHP-Skript zum Einfügen von Beispielbestellungen
Detaillierte Erklärung der Verzeichnisse und Dateien:
1. sql/ (Datenbank-Skripte)

Funktion: Dieser Unterordner enthält alle SQL-Dateien, die für das Setup und die Verwaltung der Datenbank notwendig sind. Dies umfasst das Hauptdatenbank-Skript, Migrationsdateien und Beispiel-Daten.

Dateien:
diy_shop.sql: Ein vollständiges SQL-Skript zum Erstellen und Initialisieren der gesamten Datenbankstruktur. Es enthält die Tabellenstrukturen und kann auch einige Beispiel-Daten enthalten, um das System direkt testen zu können.
demo_data.sql: Eine Datei mit Beispiel-Daten, die für Testzwecke verwendet werden kann. Diese Datei enthält z.B. fiktive Benutzer, Produkte und Bestellungen, um das System schnell auf Funktionalität zu überprüfen.
Migrationsverzeichnis:
migrations/: Enthält einzelne SQL-Skripte, die schrittweise Änderungen an der Datenbankstruktur ermöglichen. Dies ist nützlich, wenn später Anpassungen an der Datenbankstruktur erforderlich sind.
Beispieldateien:
001_create_users_table.sql: Erstellt die users-Tabelle in der Datenbank.
002_create_products_table.sql: Erstellt die products-Tabelle.
003_create_orders_table.sql: Erstellt die orders-Tabelle.
2. docs/ (Dokumentationsdateien)

Funktion: Der docs/-Ordner enthält Dokumente zur Projektbeschreibung, Datenbankstruktur und API-Dokumentation. Diese Dateien sind hilfreich für das Team, das das Projekt entwickelt und pflegt, und dienen auch als Referenz für zukünftige Entwickler.

Dateien:
ERD_Diagram.png: Ein Entity-Relationship-Diagramm (ERD) der Datenbankstruktur. Dieses Diagramm zeigt die Tabellen und ihre Beziehungen und ist nützlich für das Verständnis der Datenstruktur.
API_Documentation.md: Dokumentation der API-Endpunkte, falls dein Webshop eine API bereitstellt. Diese Datei beschreibt die verfügbaren Endpunkte, die HTTP-Methoden, die erforderlichen Parameter und Beispielantworten.
Feature_Specs.md: Eine detaillierte Spezifikation der Funktionen und Anforderungen des Webshops. Diese Datei listet die wichtigsten Features auf und beschreibt, wie sie implementiert sein sollen.
3. seeds/ (Daten-Skripte zum Auffüllen der Datenbank)

Funktion: Der seeds/-Ordner enthält PHP-Skripte, die beim Einfügen von Testdaten in die Datenbank helfen. Diese Skripte sind hilfreich, um den Webshop mit Beispiel-Daten aufzufüllen, sodass du die Benutzeroberfläche und die Funktionen testen kannst.

Dateien:
seed_products.php: Ein PHP-Skript zum Einfügen von Beispielprodukten in die products-Tabelle. Damit können Testdaten für Produkte automatisch erstellt werden, ohne dass sie manuell eingegeben werden müssen.
seed_users.php: Ein Skript zum Einfügen von Testbenutzern in die users-Tabelle. Dies ist nützlich, um die Benutzerregistrierung und die Authentifizierung zu testen.
seed_orders.php: Ein Skript zum Einfügen von Beispielbestellungen in die orders-Tabelle. Dadurch können Bestellungen für die Testzwecke erstellt und der Bestellprozess überprüft werden.
Beispielinhalte für die Dateien:
Beispiel für diy_shop.sql

sql
Code kopieren
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    image_path VARCHAR(255)
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    total_price DECIMAL(10, 2),
    status VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
Beispiel für Feature_Specs.md

markdown
Code kopieren
# Webshop Feature Specifications

## User Authentication
- Users can register with an email and password.
- Password hashing using SHA512.
- Users receive a randomly generated password via email upon registration.
- Users can log in and out securely.

## Product Management
- Admins can add, edit, and delete products.
- Products have attributes such as name, description, price, and image.
- Each product has a unique ID and can be filtered by category.

## Cart and Checkout
- Users can add products to a cart.
- Cart items can be updated in quantity or removed.
- Checkout process includes user address entry and order summary.
Beispiel für seed_products.php

php
Code kopieren
<?php
require '../config/database.php';

$products = [
    ['name' => 'DIY Candle Kit', 'description' => 'Make your own candles at home', 'price' => 15.99, 'image_path' => 'candle_kit.jpg'],
    ['name' => 'Gardening Starter Kit', 'description' => 'Grow your own herbs and flowers', 'price' => 19.99, 'image_path' => 'garden_kit.jpg'],
    ['name' => 'Home Brewing Kit', 'description' => 'Brew your own beer', 'price' => 25.99, 'image_path' => 'brewing_kit.jpg']
];

foreach ($products as $product) {
    $sql = "INSERT INTO products (name, description, price, image_path) VALUES (:name, :description, :price, :image_path)";
    $stmt = $pdo->prepare($sql);
    $stmt->execute($product);
}
