Funktion: Der tests/-Ordner enthält alle Testskripte, die geschrieben wurden, um den Code auf Funktionalität, Sicherheit und Konsistenz zu prüfen. Es werden Tests für verschiedene Teile der Anwendung organisiert, die separat ausgeführt und überprüft werden können.

Komplette Struktur:
graphql
Code kopieren
tests/
├── unit/                   # Unit-Tests für einzelne Module und Funktionen
│   ├── UserTest.php            # Test für das Benutzer-Modell und Authentifizierung
│   ├── ProductTest.php         # Test für das Produkt-Modell
│   ├── CartTest.php            # Test für das Warenkorb-Modell
│   └── OrderTest.php           # Test für das Bestellmodell
│
├── integration/             # Integrationstests für die Zusammenarbeit mehrerer Komponenten
│   ├── AuthIntegrationTest.php # Integrationstest für Login und Registrierung
│   ├── CheckoutIntegrationTest.php # Integrationstest für den Checkout-Prozess
│   └── CartCheckoutTest.php   # Integrationstest für Warenkorb und Checkout-Interaktion
│
├── fixtures/                # Testdaten für die Tests (Beispieldaten, die für Tests verwendet werden)
│   ├── users_fixture.php       # Beispiel-Benutzerdaten
│   ├── products_fixture.php    # Beispiel-Produktdaten
│   └── orders_fixture.php      # Beispiel-Bestelldaten
│
├── TestCase.php             # Basisklasse für alle Tests, stellt grundlegende Testmethoden bereit
└── bootstrap.php            # Setup-Datei für die Initialisierung und das Laden von Abhängigkeiten für Tests
Detaillierte Erklärung der Verzeichnisse und Dateien:
1. unit/ (Unit-Tests für einzelne Module und Funktionen)

Funktion: Der unit/-Ordner enthält die Unit-Tests für einzelne Module und Funktionen, die isoliert getestet werden. Jeder Test überprüft eine Funktionalität in einer bestimmten Komponente, wie z.B. das Benutzer-, Produkt- oder Warenkorb-Modell.

Dateien:
UserTest.php: Testet Funktionen im Benutzer-Modell (User.php), wie z.B. die Benutzerregistrierung, Passwort-Hashing und Benutzerauthentifizierung.
ProductTest.php: Testet Funktionen im Produkt-Modell (Product.php), wie das Hinzufügen, Abrufen und Bearbeiten von Produkten.
CartTest.php: Testet die Funktionen des Warenkorb-Modells (Cart.php), wie das Hinzufügen und Entfernen von Artikeln und die Berechnung des Gesamtpreises.
OrderTest.php: Testet Funktionen des Bestellmodells (Order.php), wie das Erstellen einer Bestellung und das Abrufen von Bestelldetails.
Beispiel für UserTest.php:

php
Code kopieren
<?php
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase {
    public function testUserRegistration() {
        $userModel = new User();
        $result = $userModel->createUser("test@example.com", "password");
        $this->assertTrue($result);
    }

    public function testUserLogin() {
        $userModel = new User();
        $user = $userModel->findUserByEmail("test@example.com");
        $this->assertEquals("test@example.com", $user['email']);
    }
}
2. integration/ (Integrationstests für die Zusammenarbeit mehrerer Komponenten)

Funktion: Der integration/-Ordner enthält Tests, die mehrere Module und Komponenten gemeinsam prüfen. Integrationstests stellen sicher, dass verschiedene Teile des Systems, wie z.B. der Checkout-Prozess, zusammen wie erwartet funktionieren.

Dateien:
AuthIntegrationTest.php: Testet die Zusammenarbeit zwischen dem Authentifizierungscontroller und dem Benutzermodell, einschließlich der Benutzerregistrierung und Anmeldung.
CheckoutIntegrationTest.php: Überprüft den gesamten Checkout-Prozess, einschließlich des Warenkorbs, der Bestellverarbeitung und der Datenbankintegration.
CartCheckoutTest.php: Testet die Interaktion zwischen Warenkorb und Checkout, z.B. ob Warenkorbänderungen im Checkout korrekt reflektiert werden.
Beispiel für CheckoutIntegrationTest.php:

php
Code kopieren
<?php
use PHPUnit\Framework\TestCase;

class CheckoutIntegrationTest extends TestCase {
    public function testCheckoutProcess() {
        $cart = new Cart();
        $cart->addToCart(1, 2);  // Produkt mit ID 1, Menge 2
        
        $checkout = new Checkout();
        $orderId = $checkout->processOrder($cart);
        $this->assertNotNull($orderId);

        $orderModel = new Order();
        $order = $orderModel->findOrderById($orderId);
        $this->assertEquals("pending", $order['status']);
    }
}
3. fixtures/ (Testdaten für die Tests)

Funktion: Dieser Ordner enthält vorbereitete Testdaten, die während der Tests verwendet werden. Fixtures werden genutzt, um die Testdatenbank mit Beispiel-Daten aufzufüllen, die in den Unit- und Integrationstests verwendet werden.

Dateien:
users_fixture.php: Beinhaltet Beispiel-Benutzerdaten, die für Tests zur Benutzerregistrierung und Authentifizierung genutzt werden.
products_fixture.php: Enthält Beispiel-Produktdaten für Tests im Zusammenhang mit dem Warenkorb und den Produktansichten.
orders_fixture.php: Enthält Beispiel-Bestelldaten, die für Tests im Zusammenhang mit Bestellungen und Checkout verwendet werden.
Beispiel für products_fixture.php:

php
Code kopieren
<?php
return [
    ['name' => 'DIY Candle Kit', 'description' => 'Make your own candles', 'price' => 15.99],
    ['name' => 'Gardening Starter Kit', 'description' => 'Grow herbs and flowers', 'price' => 19.99],
    ['name' => 'Home Brewing Kit', 'description' => 'Brew your own beer', 'price' => 25.99]
];
4. TestCase.php (Basisklasse für alle Tests)

Funktion: Die Datei TestCase.php dient als Basisklasse für alle Testfälle. Hier können gemeinsame Setups, Helper-Methoden und Konfigurationen definiert werden, die von den einzelnen Tests geerbt und genutzt werden.

Beispielinhalt:

php
Code kopieren
<?php
use PHPUnit\Framework\TestCase;

class BaseTestCase extends TestCase {
    protected $db;

    protected function setUp(): void {
        $this->db = new PDO("mysql:host=localhost;dbname=test_db", "user", "password");
    }

    protected function tearDown(): void {
        $this->db = null;  // Schließt die Datenbankverbindung nach jedem Test
    }
}
5. bootstrap.php (Initialisierungs- und Setup-Datei für Tests)

Funktion: Die bootstrap.php-Datei wird vor dem Start der Tests ausgeführt und dient dazu, die Testumgebung zu initialisieren, benötigte Abhängigkeiten zu laden und Testdaten in die Datenbank zu laden.

Beispielinhalt:

php
Code kopieren
<?php
// Autoloader laden
require_once __DIR__ . '/../vendor/autoload.php';

// Testdatenbank einrichten
$db = new PDO("mysql:host=localhost;dbname=test_db", "user", "password");

// Testdaten aus Fixtures laden
$fixtures = require __DIR__ . '/fixtures/users_fixture.php';
foreach ($fixtures as $user) {
    $stmt = $db->prepare("INSERT INTO users (email, password) VALUES (:email, :password)");
    $stmt->execute($user);
}
