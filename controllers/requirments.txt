Funktion: Der controllers/-Ordner enthält PHP-Dateien, die die Geschäftslogik und die Verarbeitung von Benutzereingaben (wie Anmeldungen, Produktanzeigen, Bestellungen) steuern. Jeder Controller ist für eine bestimmte Funktionalität im Webshop zuständig und verbindet die Benutzeranfragen mit den Modellen (Datenbank) und den Ansichten (HTML-Seiten).

Komplette Struktur:
graphql
Code kopieren
controllers/
├── AuthController.php         # Verwalten von Benutzeranmeldungen, Registrierung und Authentifizierung
├── ProductController.php      # Anzeigen und Verwalten von Produkten im Webshop
├── CartController.php         # Bearbeitung von Warenkorb-Aktionen (Hinzufügen, Entfernen, Bearbeiten von Artikeln)
├── CheckoutController.php     # Abwicklung des Bestellvorgangs und Bezahlung
├── OrderController.php        # Verwaltung der Bestellungen (Übersicht, Wiederbestellungen)
└── AdminController.php        # Verwaltung von Admin-Funktionen (Produkte hinzufügen, bearbeiten, Bestellungen verwalten)
Detaillierte Erklärung der Controller:
1. AuthController.php (Benutzeranmeldung und -authentifizierung)

Funktion: Der AuthController ist verantwortlich für alle Authentifizierungsprozesse, einschließlich Benutzeranmeldung, Registrierung, Passwortänderung und eventuell Passwort-Reset.

Beispielinhalt:

php
Code kopieren
<?php

class AuthController {
    // Registrierung eines neuen Benutzers
    public function register() {
        // Validierung der Formulardaten
        $email = $_POST['email'];
        $password = $_POST['password'];
        $hashedPassword = hash('sha512', $password);

        // In der Datenbank speichern
        $userModel = new User();
        $userModel->createUser($email, $hashedPassword);
    }

    // Benutzeranmeldung
    public function login() {
        $email = $_POST['email'];
        $password = $_POST['password'];
        $hashedPassword = hash('sha512', $password);

        // Überprüfen, ob Benutzer existiert
        $userModel = new User();
        $user = $userModel->findUserByEmail($email);

        if ($user && $user['password'] === $hashedPassword) {
            // Anmeldung erfolgreich
            $_SESSION['user'] = $user;
            header('Location: /dashboard');
        } else {
            // Fehlermeldung
            echo "Anmeldung fehlgeschlagen";
        }
    }

    // Abmeldung des Benutzers
    public function logout() {
        session_destroy();
        header('Location: /');
    }
}
Funktionen:

register(): Handhabt die Benutzerregistrierung (einschließlich Passwort-Hashing).
login(): Verifiziert die Benutzeranmeldung und startet eine Session.
logout(): Beendet die Benutzersitzung.
2. ProductController.php (Verwaltung der Produkte)

Funktion: Dieser Controller ist für das Anzeigen von Produkten, Filtern von Kategorien und eventuell auch für die Suche nach Produkten zuständig. Er interagiert mit dem Product-Modell, um Produkte aus der Datenbank zu laden.

Beispielinhalt:

php
Code kopieren
<?php

class ProductController {
    // Zeigt die Produktliste an
    public function index() {
        $productModel = new Product();
        $products = $productModel->getAllProducts();

        require 'views/products/index.php';  // Lädt die Ansicht mit den Produkten
    }

    // Zeigt die Detailseite eines Produkts
    public function show($id) {
        $productModel = new Product();
        $product = $productModel->findProductById($id);

        require 'views/products/show.php';  // Lädt die Produktdetailansicht
    }
}
Funktionen:

index(): Holt alle Produkte aus der Datenbank und lädt die Produktübersichtsseite.
show($id): Zeigt die Detailseite eines bestimmten Produkts an, basierend auf der id.
3. CartController.php (Warenkorb-Verwaltung)

Funktion: Der CartController ist für das Hinzufügen, Entfernen und Bearbeiten von Artikeln im Warenkorb verantwortlich. Er arbeitet eng mit dem Product- und Cart-Modell zusammen, um die aktuellen Produkte und Mengen zu verwalten.

Beispielinhalt:

php
Code kopieren
<?php

class CartController {
    // Fügt ein Produkt zum Warenkorb hinzu
    public function add($productId) {
        $productModel = new Product();
        $product = $productModel->findProductById($productId);

        if ($product) {
            $_SESSION['cart'][$productId] = [
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => 1
            ];
        }

        header('Location: /cart');
    }

    // Entfernt ein Produkt aus dem Warenkorb
    public function remove($productId) {
        unset($_SESSION['cart'][$productId]);
        header('Location: /cart');
    }

    // Zeigt den Warenkorb an
    public function index() {
        $cart = $_SESSION['cart'] ?? [];
        require 'views/cart/index.php';
    }
}
Funktionen:

add($productId): Fügt ein Produkt zum Warenkorb hinzu.
remove($productId): Entfernt ein Produkt aus dem Warenkorb.
index(): Zeigt die Warenkorbseite mit allen Artikeln an.
4. CheckoutController.php (Bestellvorgang und Zahlung)

Funktion: Dieser Controller verarbeitet den gesamten Checkout-Prozess, einschließlich der Überprüfung des Warenkorbs, der Berechnung der Versandkosten und der Bearbeitung der Zahlung.

Beispielinhalt:

php
Code kopieren
<?php

class CheckoutController {
    // Zeigt die Checkout-Seite an
    public function index() {
        $cart = $_SESSION['cart'] ?? [];
        $totalPrice = $this->calculateTotal($cart);

        require 'views/checkout/index.php';
    }

    // Berechnet den Gesamtpreis
    private function calculateTotal($cart) {
        $total = 0;
        foreach ($cart as $item) {
            $total += $item['price'] * $item['quantity'];
        }
        return $total;
    }

    // Verarbeitet die Bestellung
    public function processOrder() {
        $orderModel = new Order();
        $orderId = $orderModel->createOrder($_SESSION['user']['id'], $_SESSION['cart']);
        unset($_SESSION['cart']);  // Warenkorb leeren nach erfolgreicher Bestellung

        header('Location: /thankyou?order=' . $orderId);
    }
}
Funktionen:

index(): Zeigt die Checkout-Seite an und berechnet den Gesamtpreis.
calculateTotal($cart): Berechnet den Gesamtpreis des Warenkorbs.
processOrder(): Verarbeitet die Bestellung und leitet den Benutzer zur Dankeseite weiter.
5. OrderController.php (Bestellverwaltung)

Funktion: Verarbeitet Bestellungen, zeigt eine Übersicht der Bestellungen an und ermöglicht es den Nutzern, ihre vergangenen Bestellungen einzusehen oder zu wiederholen.

Beispielinhalt:

php
Code kopieren
<?php

class OrderController {
    // Zeigt die Bestellübersicht an
    public function index() {
        $orderModel = new Order();
        $orders = $orderModel->getOrdersByUserId($_SESSION['user']['id']);

        require 'views/orders/index.php';
    }

    // Zeigt eine bestimmte Bestellung an
    public function show($orderId) {
        $orderModel = new Order();
        $order = $orderModel->findOrderById($orderId);

        require 'views/orders/show.php';
    }
}
Funktionen:

index(): Zeigt eine Übersicht aller Bestellungen eines Nutzers an.
show($orderId): Zeigt die Details einer bestimmten Bestellung an.
6. AdminController.php (Verwaltung des Webshops)

Funktion: Der Admin-Controller verwaltet administrative Funktionen wie das Hinzufügen, Bearbeiten und Löschen von Produkten sowie das Verwalten von Bestellungen.

Beispielinhalt:

php
Code kopieren
<?php

class AdminController {
    // Zeigt die Produktverwaltungsseite an
    public function products() {
        $productModel = new Product();
        $products = $productModel->getAllProducts();

        require 'views/admin/products.php';
    }

    // Fügt ein neues Produkt hinzu
    public function addProduct() {
        // Produkt hinzufügen Logik
    }
}
