Funktion: Der public-Ordner dient als öffentlicher Ordner des Webshops, auf den Benutzer direkt zugreifen können. Dieser Ordner enthält die Hauptseiten des Webshops, wie die Startseite, das Login, den Warenkorb und den Checkout, sowie statische Dateien, die für das Frontend benötigt werden.

Komplette Struktur:
graphql
Code kopieren
public/
├── index.php             # Startseite des Webshops mit einer Übersicht der Produkte
├── login.php             # Seite für die Benutzeranmeldung
├── register.php          # Seite für die Benutzerregistrierung
├── cart.php              # Seite für den Warenkorb mit allen hinzugefügten Artikeln
├── checkout.php          # Seite für den Checkout-Prozess und die Zahlungsabwicklung
├── product.php           # Seite zur Anzeige von Produktdetails
├── thankyou.php          # Seite, die nach erfolgreichem Checkout angezeigt wird
├── assets/               # Verknüpfung mit CSS, JS und Bilddateien
│   ├── css/              # Stylesheets
│   ├── js/               # JavaScript-Dateien
│   └── images/           # Bilder, falls nötig
└── .htaccess             # Datei zur Konfiguration von URL-Weiterleitungen und Sicherheitseinstellungen
Detaillierte Erklärung der Dateien:
1. index.php (Startseite)

Funktion: Die Startseite des Webshops, auf der die verfügbaren Produkte angezeigt werden. Dies ist die erste Seite, die Benutzer sehen, wenn sie den Webshop besuchen.

Beispielinhalt:

php
Code kopieren
<?php
require '../models/Product.php';

$productModel = new Product();
$products = $productModel->getAllProducts();

include '../views/layouts/header.php';  // Einbindung des Headers

foreach ($products as $product) {
    echo "<div class='product-item'>";
    echo "<h2>{$product['name']}</h2>";
    echo "<p>{$product['description']}</p>";
    echo "<p>Preis: {$product['price']} €</p>";
    echo "<a href='product.php?id={$product['id']}'>Details</a>";
    echo "</div>";
}

include '../views/layouts/footer.php';  // Einbindung des Footers
2. login.php (Anmeldeseite)

Funktion: Seite für die Benutzeranmeldung. Hier geben Benutzer ihre Anmeldedaten ein, um sich im Webshop anzumelden.

Beispielinhalt:

php
Code kopieren
<?php
include '../views/layouts/header.php';

echo "<h2>Login</h2>";
echo "<form action='../controllers/AuthController.php?action=login' method='POST'>";
echo "<input type='email' name='email' placeholder='E-Mail'>";
echo "<input type='password' name='password' placeholder='Passwort'>";
echo "<button type='submit'>Login</button>";
echo "</form>";

include '../views/layouts/footer.php';
3. register.php (Registrierungsseite)

Funktion: Diese Seite ermöglicht es neuen Benutzern, ein Konto zu erstellen. Die eingegebenen Daten werden an den AuthController gesendet.

Beispielinhalt:

php
Code kopieren
<?php
include '../views/layouts/header.php';

echo "<h2>Registrieren</h2>";
echo "<form action='../controllers/AuthController.php?action=register' method='POST'>";
echo "<input type='email' name='email' placeholder='E-Mail'>";
echo "<input type='password' name='password' placeholder='Passwort'>";
echo "<button type='submit'>Registrieren</button>";
echo "</form>";

include '../views/layouts/footer.php';
4. cart.php (Warenkorbseite)

Funktion: Zeigt die im Warenkorb gespeicherten Artikel an und ermöglicht es dem Benutzer, die Anzahl zu ändern oder Artikel zu entfernen.

Beispielinhalt:

php
Code kopieren
<?php
require '../models/Cart.php';

$cartModel = new Cart();
$cartItems = $cartModel->getCart();

include '../views/layouts/header.php';

foreach ($cartItems as $item) {
    echo "<div class='cart-item'>";
    echo "<h2>{$item['name']}</h2>";
    echo "<p>Preis: {$item['price']} €</p>";
    echo "<p>Menge: {$item['quantity']}</p>";
    echo "<a href='cart.php?action=remove&id={$item['id']}'>Entfernen</a>";
    echo "</div>";
}

include '../views/layouts/footer.php';
5. checkout.php (Checkout-Seite)

Funktion: Seite für die Bezahlung und Eingabe der Versandinformationen. Nach der Bestätigung wird die Bestellung abgeschlossen und gespeichert.

Beispielinhalt:

php
Code kopieren
<?php
include '../views/layouts/header.php';

echo "<h2>Checkout</h2>";
echo "<form action='../controllers/CheckoutController.php?action=processOrder' method='POST'>";
echo "<input type='text' name='address' placeholder='Lieferadresse'>";
echo "<button type='submit'>Bestellung abschließen</button>";
echo "</form>";

include '../views/layouts/footer.php';
6. product.php (Produktdetailseite)

Funktion: Zeigt die Details eines spezifischen Produkts an, einschließlich Beschreibung, Preis und Optionen zum Hinzufügen in den Warenkorb.

Beispielinhalt:

php
Code kopieren
<?php
require '../models/Product.php';

$productModel = new Product();
$product = $productModel->findProductById($_GET['id']);

include '../views/layouts/header.php';

echo "<h2>{$product['name']}</h2>";
echo "<p>{$product['description']}</p>";
echo "<p>Preis: {$product['price']} €</p>";
echo "<form action='cart.php?action=add&id={$product['id']}' method='POST'>";
echo "<button type='submit'>In den Warenkorb</button>";
echo "</form>";

include '../views/layouts/footer.php';
7. thankyou.php (Dankeschön-Seite nach dem Checkout)

Funktion: Diese Seite wird angezeigt, nachdem der Benutzer die Bestellung erfolgreich abgeschlossen hat.

Beispielinhalt:

php
Code kopieren
<?php
include '../views/layouts/header.php';

echo "<h2>Vielen Dank für Ihre Bestellung!</h2>";
echo "<p>Ihre Bestellung wird in Kürze bearbeitet.</p>";

include '../views/layouts/footer.php';
8. assets/ (statische Dateien)

Funktion: Der assets/-Ordner innerhalb von public/ enthält Verknüpfungen zu den CSS-, JavaScript- und Bilddateien, die im Frontend verwendet werden. Dieser Ordner dient als Brücke zu den assets im Projektverzeichnis und macht sie öffentlich zugänglich.

Ordnerstruktur:
csharp
Code kopieren
public/
└── assets/
    ├── css/               # Verlinkung der CSS-Dateien
    ├── js/                # Verlinkung der JavaScript-Dateien
    └── images/            # Verlinkung der Bilder
9. .htaccess (URL-Weiterleitungen und Sicherheitseinstellungen)

Funktion: Die .htaccess-Datei ist eine Konfigurationsdatei für Apache-Webserver. Sie kann verwendet werden, um URL-Weiterleitungen einzurichten, Zugriffsbeschränkungen hinzuzufügen, und andere serverseitige Einstellungen zu definieren.

Beispielinhalt:

ruby
Code kopieren
# Leitet alle Anfragen über index.php weiter (URL-Rewrite für "Clean URLs")
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php?url=$1 [QSA,L]

# Sicherheitseinstellungen
<FilesMatch "\.(php|inc|ini)$">
    Order Deny,Allow
    Deny from all
</FilesMatch>
URL-Rewrite: Die .htaccess-Datei ermöglicht "Clean URLs" (z.B. /product/1 anstelle von product.php?id=1).
Sicherheitsmaßnahmen: Bestimmte Dateitypen wie .php oder .ini können vor direktem Zugriff geschützt werden.